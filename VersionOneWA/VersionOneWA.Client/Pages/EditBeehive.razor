@page "/edit-beehives"
@page "/edit-beehives/{Id:int}"
@inject IBeehiveService BeehiveService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@rendermode InteractiveAuto

@if (Id == null)
{
    <h2>Create Beehive</h2>
}
else
{
    <h2>Edit @beehive.Name</h2>
}

<h3>What’s the buzz today?</h3>
<h5>Every bee knows: no tasks, no honey. Keep the hive alive and thriving!</h5>

<div class="form-container">
    <EditForm EditContext="editContext" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit" FormName="EditBeehive">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Name</label>
            <InputText @bind-Value="beehive.Name" class="form-control" />

            <label>Beehive weight</label>
            <InputNumber @bind-Value="beehive.beehiveWeight" TValue="double?" class="form-control" />

       @*      <label>Number of bees</label>
            <InputNumber @bind-Value="beehive.numberOfBees" TValue="int?" class="form-control" /> *@

            <label>Queen's age</label>
            <InputNumber @bind-Value="beehive.QueensAge" TValue="int?" class="form-control" />
        </div>

        <br>
        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Submit</button>

        <ValidationSummary />
    </EditForm>
</div>

@code {
    [Parameter] public int? Id { get; set; }

    private Beehive beehive = new()
    {
        Name = string.Empty,
        beehiveWeight = 0,
        numberOfBees = 0,
        QueensAge = 0
    };

    private EditContext editContext;
    private bool isSubmitting = false;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim != null)
        {
            currentUserId = userIdClaim.Value;
        }

        if (string.IsNullOrEmpty(currentUserId))
        {
            throw new Exception("User ID is null! Make sure authentication is properly configured.");
        }

        editContext = new EditContext(beehive);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            beehive = new Beehive
            {
                Name = string.Empty,
                beehiveWeight = 0,
                numberOfBees = 0,
                QueensAge = 0
            };
        }
        else
        {
            var existing = await BeehiveService.GetBeehiveById((int)Id);
            beehive = existing ?? new Beehive();
        }

        editContext = new EditContext(beehive);
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting)
            return;

        isSubmitting = true;

        try
        {
            GetNumberOfBees();

            if (string.IsNullOrWhiteSpace(beehive.Name))
                return;

            if (Id == null)
            {
                beehive.UserId = currentUserId;
                Console.WriteLine("Creating Beehive: " + beehive.Name + ", UserId: " + beehive.UserId);
                await BeehiveService.AddBeehive(beehive);
            }
            else
            {
                Console.WriteLine("Editing Beehive: " + beehive.Name + ", Id: " + beehive.Id);
                await BeehiveService.EditBeehive(beehive.Id, beehive);
            }

            NavigationManager.NavigateTo("/beehives");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error saving beehive: " + ex.Message);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Form submission failed due to invalid data.");
    }

    private void GetNumberOfBees()
    {
        if (beehive.beehiveWeight.HasValue)
        {
            double weight = beehive.beehiveWeight.Value;
            beehive.numberOfBees = (int?)Math.Ceiling((weight / 0.000120) * 2);
        }
    }
}
