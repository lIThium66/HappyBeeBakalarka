@page "/edit-status"
@page "/edit-status/{id:int}"
@using System.Security.Claims
@inject IStatusServices StatusServices
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveAuto

@if (Id == null)
{
    <h2>Create Status</h2>
}
else
{
    <h2>Edit @status.Name</h2>
}

<h3>Track Your Hive’s Progress</h3>
<h5>Statuses help keep your colony on the right path. Stay informed, stay effective.</h5>

<div class="form-container">
    <EditForm EditContext="editContext" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit" FormName="EditStatus">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Name</label>
            <InputText @bind-Value="status.Name" />

            <label>Report</label>
            <textarea class="desc-text" @bind="status.Report"></textarea>

            <label>Created At</label>
            <InputDate @bind-Value="status.CreatedAt" />

            <label>Done Treatment</label>
            <div class="button-group">
                <button type="button" class="@GetButtonClass(status.doneTreatment, true, "treatment")" @onclick="() => SetTreatment(true)">YES</button>
                <button type="button" class="@GetButtonClass(status.doneTreatment, false, "treatment")" @onclick="() => SetTreatment(false)">NO</button>
                <span class="status-text">@treatmentText</span>
            </div>

            <label>Supplied Water</label>
            <div class="button-group">
                <button type="button" class="@GetButtonClass(status.suppliedWater, true, "water")" @onclick="() => SetWater(true)">YES</button>
                <button type="button" class="@GetButtonClass(status.suppliedWater, false, "water")" @onclick="() => SetWater(false)">NO</button>
                <span class="status-text">@waterText</span>
            </div>

            <label>Supplied Sugar</label>
            <div class="button-group">
                <button type="button" class="@GetButtonClass(status.suppliedSugar, true, "sugar")" @onclick="() => SetSugar(true)">YES</button>
                <button type="button" class="@GetButtonClass(status.suppliedSugar, false, "sugar")" @onclick="() => SetSugar(false)">NO</button>
                <span class="status-text">@sugarText</span>
            </div>

        </div>

        <br />
        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Submit</button>
        <ValidationSummary />
    </EditForm>
</div>

@code {
    [Parameter] public int? Id { get; set; }

    private EditContext? editContext;
    private bool isSubmitting;
    private string? currentUserId;
    private string treatmentText = "";
    private string waterText = "";
    private string sugarText = "";

    private Status status = new Status
        {
            Name = string.Empty,
            Report = string.Empty,
            CreatedAt = DateTime.Now,
            doneTreatment = false,
            suppliedWater = false,
            suppliedSugar = false
        };



    private void SetTreatment(bool value)
    {
        status.doneTreatment = value;
        treatmentText = value ? "Treatment: Done" : "Treatment: Not Done";
    }

    private void SetWater(bool value)
    {
        status.suppliedWater = value;
        waterText = value ? "Water: Supplied" : "Water: Not Supplied";
    }

    private void SetSugar(bool value)
    {
        status.suppliedSugar = value;
        sugarText = value ? "Sugar: Supplied" : "Sugar: Not Supplied";
    }

    private void UpdateTexts()
    {
        treatmentText = status.doneTreatment.HasValue && status.doneTreatment.Value
            ? "Treatment: Done"
            : "Treatment: Not Done";

        waterText = status.suppliedWater.HasValue && status.suppliedWater.Value
            ? "Water: Supplied"
            : "Water: Not Supplied";

        sugarText = status.suppliedSugar.HasValue && status.suppliedSugar.Value
            ? "Sugar: Supplied"
            : "Sugar: Not Supplied";
    }


    private string GetButtonClass(bool? currentValue, bool buttonValue, string category)
    {
        bool isSelected = currentValue == buttonValue;

        if (buttonValue)
        {
            return isSelected ? "btn btn-primary selected" : "btn btn-primary";
        }
        else
        {
            return isSelected ? "btn btn-danger selected" : "btn btn-danger";
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim != null)
        {
            currentUserId = userIdClaim.Value;
        }

        if (string.IsNullOrEmpty(currentUserId))
        {
            throw new Exception("User ID is null! Authentication might not be properly configured.");
        }

        editContext = new EditContext(status);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            status = new Status
                {
                    Name = string.Empty,
                    Report = string.Empty,
                    CreatedAt = DateTime.Now,
                    doneTreatment = false,
                    suppliedWater = false,
                    suppliedSugar = false
                };
        }
        else
        {
            var existingStatus = await StatusServices.GetStatusById((int)Id);
            if (existingStatus != null)
            {
                status = existingStatus;
            }
            else
            {
                status = new Status();
            }
        }

        editContext = new EditContext(status);
        UpdateTexts();
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting)
        {
            return;
        }

        isSubmitting = true;

        try
        {
            if (Id == null)
            {
                if (string.IsNullOrEmpty(currentUserId))
                {
                    throw new Exception("UserID is null. Are you sure user is authenticated?");
                }

                status.UserId = currentUserId;
                Console.WriteLine("Creating status: " + status.Name + ", UserId: " + status.UserId);
                await StatusServices.AddStatus(status);
            }
            else
            {
                Console.WriteLine("Editing status: " + status.Name + ", Id: " + status.Id);
                await StatusServices.EditStatus((int)status.Id, status);
            }

            NavigationManager.NavigateTo("/report");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error saving status: " + ex.Message);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Form submission failed due to invalid data.");
    }
}
