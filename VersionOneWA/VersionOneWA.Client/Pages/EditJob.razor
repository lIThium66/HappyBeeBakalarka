@page "/edit-tasks"
@page "/edit-tasks/{id:int}"
@using System.Security.Claims
@inject IJobServices JobServices
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveAuto


@if (Id == null)
{
    <h2>Create task</h2>
}
else
{
    <h2>Edit @job.Name</h2>
}

<h3>What’s the buzz today?</h3>
<h5>Every bee knows: no tasks, no honey. Keep the hive alive and thriving!</h5>

<div class="form-container">
    <EditForm EditContext="editContext" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit" FormName="EditTask">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Name</label>
            <InputText @bind-Value="job.Name" />

            <br>
            <label>Description</label>
            <textarea class="desc-text" @bind="job.Description"></textarea>

            <label>Priority</label>
            <select class="form-control" @bind="job.Priority">
                <option value="1">1 - Urgent</option>
                <option value="2">2 - Important</option>
                <option value="3" selected>3 - Not Urgent</option>
            </select>

            <label>Date and Time</label>
            <InputDate @bind-Value="job.JobDate" />
        </div>

        <br>
        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Submit</button>

        <ValidationSummary />
    </EditForm>
</div>

@code {

    [Parameter] public int? Id { get; set; }
    private EditContext editContext;
    private bool isSubmitting;
    private string? currentUserId;
    private Job job = new Job { Name = string.Empty, Description = string.Empty, Priority = 3 };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim != null)
        {
            currentUserId = userIdClaim.Value;
        }

        Console.WriteLine("Current User ID: " + currentUserId);

        if (string.IsNullOrEmpty(currentUserId))
        {
            throw new Exception("User ID is null! Make sure authentication is properly configured.");
        }

        editContext = new EditContext(job);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            job = new Job();
            job.Name = string.Empty;
            job.Description = string.Empty;
            job.Priority = 3;
        }
        else
        {
            var existingJob = await JobServices.GetJobById((int)Id);
            if (existingJob != null)
            {
                job = existingJob;
            }
            else
            {
                job = new Job();
            }
        }

        editContext = new EditContext(job);
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (isSubmitting)
        {
            return;
        }

        isSubmitting = true;

        try
        {
            if (Id == null)
            {
                if (string.IsNullOrEmpty(currentUserId))
                {
                    throw new Exception("UserID is null. Are you sure user is authenticated?");
                }

                job.UserId = currentUserId;
                Console.WriteLine("Creating Job: " + job.Name + ", UserId: " + job.UserId);
                await JobServices.AddJob(job);
            }
            else
            {
                Console.WriteLine("Editing Job: " + job.Name + ", Id: " + job.Id);
                await JobServices.EditJob(job.Id, job);
            }

            NavigationManager.NavigateTo("/tasks");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error saving job: " + ex.Message);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        Console.WriteLine("Form submission failed due to invalid data.");
    }
}
