@page "/edit-tasks"
@page "/edit-tasks/{id:int}"
@inject IJobServices JobServices
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager

@if (Id == null)
{
    <h2>Create task</h2>
}
else
{
    <h2>Edit @job.Name</h2>
}

<h3>What’s the buzz today?</h3>
<h5>Every bee knows: no tasks, no honey. Keep the hive alive and thriving!</h5>

<div class="form-container">
    <EditForm EditContext="editContext" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit" FormName="EditTask">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Name</label>
            <InputText @bind-Value="job.Name" />
          @* <ValidationMessage For="@(() => job.Name)" class="validation-message" /> *@ 
            <br>
            <label>Description</label>
            <textarea class="desc-text" @bind="job.Description"></textarea>
            @*<ValidationMessage For="@(() => job.Description)" class="validation-message" />*@

            <label>Priority</label>
            <select class="form-control" @bind="job.Priority">
                <option value="1">1 - Urgent</option>
                <option value="2">2 - Important</option>
                <option value="3" selected>3 - Not Urgent</option>
            </select>

        </div>
        <br>
        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Submit</button>

        <ValidationSummary />
    </EditForm>
</div>



@code {

    [Parameter]
    public int? Id { get; set; }
    Job job { get; set; } = new Job { Name = string.Empty, Description = string.Empty, Priority = 3};
    EditContext editContext = null!;
    private bool isSubmitting = false;

    protected override void OnInitialized()
    {
        editContext = new EditContext(job);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            job = new Job { Name = string.Empty, Description = string.Empty, Priority = 3                                                                                                                                                                                                                                                                                 };
        editContext = new EditContext(job);
            return;
        }

        job = await JobServices.GetJobById((int)Id); 
        editContext = new EditContext(job);
    }
    


    async Task HandleSubmit()
    {
        if (job.Name == string.Empty)
        {
            return;    
        }
        if (isSubmitting)
            return; 

        isSubmitting = true;

        try
        {
            if (Id == null)
            {
                await JobServices.AddJob(job);
                NavigationManager.NavigateTo("/tasks");
            }
            else
            {
                await JobServices.EditJob((int)Id, job);
                NavigationManager.NavigateTo("/tasks");

            }

           
        }
        catch (Exception ex)
        {
           Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false; 
        }
    }

    void HandleInvalidSubmit()
    {
        Console.WriteLine("Form submission failed due to invalid data.");
    }
}