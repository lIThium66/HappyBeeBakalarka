@page "/edit-status"
@page "/edit-status/{id:int}"
@inject IStatusServices StatusServices
@rendermode InteractiveAuto
@inject NavigationManager NavigationManager

@if (Id == null)
{
    <h2>Create Status</h2>
}
else
{
    <h2>Edit @status.Name</h2>
}

<h3>Manage Status</h3>
<h5>Statuses help organize and track progress efficiently.</h5>

<div class="form-container">
    <EditForm EditContext="editContext" OnValidSubmit="HandleSubmit" OnInvalidSubmit="HandleInvalidSubmit" FormName="EditStatus">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Description</label>
            <InputText @bind-Value="status.Name" />
            @* <ValidationMessage For="@(() => status.Name)" class="validation-message" /> *@
            <br>
        </div>
        <br>
        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Submit</button>
        <ValidationSummary />
    </EditForm>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    Status status { get; set; } = new Status { Name = string.Empty };
    EditContext editContext = null!;
    private bool isSubmitting = false;

    protected override void OnInitialized()
    {
        editContext = new EditContext(status);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            status = new Status { Name = string.Empty };
            editContext = new EditContext(status);
            return;
        }

        status = await StatusServices.GetInfoById(Id.Value);
        editContext = new EditContext(status);
    }

    async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(status.Name))
        {
            return;
        }
        if (isSubmitting)
            return;

        isSubmitting = true;

        try
        {
            if (Id == null)
            {
                await StatusServices.AddStatus(status);
                NavigationManager.NavigateTo("/info");
            }
            else
            {
                await StatusServices.EditStatus(Id.Value, status);
                NavigationManager.NavigateTo("/info");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    void HandleInvalidSubmit()
    {
        Console.WriteLine("Form submission failed due to invalid data.");
    }
}