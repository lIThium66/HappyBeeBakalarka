@page "/beehives"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IBeehiveService BeehiveService
@inject NavigationManager NavigationManager
@using System.Security.Claims




<h2><strong> Beehives </strong></h2>

<h4>Add your new beehive...</h4>
 <br>
 <CreateBeehiveButton></CreateBeehiveButton>

@if (beehives == null)
{
    <span>Loading...</span>
    <br>
}
else if (beehives.Count == 0)
{
    <span>No tasks found.</span>
    <br>
}
else
{
    <div class="hives-container">
        @foreach (var beehive in beehives)
        {
            <div class="hive-card">
                <h2>@beehive.Name</h2>
                <h5> Beehive Weight: @beehive.beehiveWeight kg <br> Number of bees: @beehive.numberOfBees</h5>
                <div class="hive-buttons">
                    <EditBeehiveButton Id="beehive.Id" />
                    <DeleteBeehiveButton Id="beehive.Id" OnBeehiveDeleted="HandleBeehiveDeleted" />
                </div>
            </div>
        }

    </div>
}

@code {

    List<Beehive>? beehives = null;

    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");

            return;
        }

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim != null)
        {
            currentUserId = userIdClaim.Value;
        }

        if (!string.IsNullOrEmpty(currentUserId))
        {
            beehives = await BeehiveService.GetUserBeehives(currentUserId);
        }
        if (user.IsInRole("Admin"))
        {
            beehives = await BeehiveService.GetAllBeehives();
        }
    }

    private async Task HandleBeehiveDeleted(int id)
    {
        beehives = beehives?.Where(beehive => beehive.Id != id).ToList();
        StateHasChanged();
    }

}
