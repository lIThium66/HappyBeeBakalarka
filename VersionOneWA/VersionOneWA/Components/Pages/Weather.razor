@page "/weather"
@using static VersionOneWA.Shared.Services.WeatherService
@inject WeatherService WeatherService
@rendermode InteractiveServer

<h3>Weather</h3>
<hr>
<div class="weather-container">

    <div class="search-box">
        <input @bind="City" placeholder="Enter city" />
        <button @onclick="SearchWeather"><strong>Search</strong>🔍</button>
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p style="color: red;">@ErrorMessage</p>
    }

    @if (Forecast != null)
    {
        <div class="weather-forecast-container">
            @foreach (var weather in Forecast.DailyForecast)
            {
                <div class="weather-box">
                    <strong>@DateTime.Parse(weather.Date).ToString("dd.MM.yyyy")</strong>
                    <p>@weather.Temp°C</p>
                    <strong>@weather.Description.ToUpper()</strong> <br>
                    <img src="@($"https://openweathermap.org/img/wn/{weather.Icon}@2x.png")" alt="Weather icon" />
                </div>
            }
        </div>
    }
</div>


@code {
    private string City { get; set; } = "";
    private WeatherForecastResponse Forecast { get; set; }
    private string ErrorMessage { get; set; } = "";

    private async Task SearchWeather()
    {
        ErrorMessage = "";
        Forecast = null;

        if (string.IsNullOrWhiteSpace(City))
        {
            ErrorMessage = "Enter city";
            return;
        }

        try
        {
            Forecast = await WeatherService.GetWeatherForecastAsync(City);
            if (Forecast == null || Forecast.DailyForecast == null || !Forecast.DailyForecast.Any())
            {
                ErrorMessage = "Can't find any info.";
            }
        }
        catch (HttpRequestException)
        {
            ErrorMessage = "City does not exists!";
        }
        catch (Exception)
        {
            ErrorMessage = "Error! Try later!";
        }
    }
}
