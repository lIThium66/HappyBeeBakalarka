@page "/home"
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject UserManager<ApplicationUser> UserManager
@inject IJobServices JobService
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [StreamRendering]
@attribute [AllowAnonymous]


<head>
    <title>Home</title>

</head>


<h1> <strong>HAPPY BEE</strong> </h1>
<h2>Welcome, @userName</h2>
<hr>
<AuthorizeView>
    <NotAuthorized>
        <h3><strong>You must log in to view the content.</strong></h3>
    </NotAuthorized>
    <Authorized>

    @if (jobs.Count == 0 || jobs == null)
{
    <div class="no-tasks-container">
        <p>You don't have any tasks yet.</p>
        <hr>
    </div>
}

<div class="urgent-tasks-container">
    @for (int i = 0; i < jobs.Count; i++)
    {
        if (jobs[i].Priority == 1 && !jobs[i].IsCompleted)
        {
            <div class="task-card urgent">
                <h2>@jobs[i].Name</h2>
                @if (jobs[i].JobDate.HasValue)
                {
                    <p class="task-date">@jobs[i].JobDate?.ToString("dd.MM.yyyy")</p>

                    @if (jobs[i].JobDate < DateTime.Now)
                    {
                        <p class="deadline-passed">DEADLINE HAS PASSED!</p>
                    }
                    else
                    {
                        <p class="time-remaining">@GetTimeRemaining(jobs[i].JobDate.Value)</p>
                    }
                }
            </div>
        }
    }
</div>

<div class="deadline-tasks-container">
    @for (int i = 0; i < jobs.Count; i++)
    {
        if (jobs[i].Priority != 1 && jobs[i].JobDate.HasValue && jobs[i].JobDate <= DateTime.Now.AddDays(3) &&  !jobs[i].IsCompleted)
        {
            <div class="task-card">
                <h2>@jobs[i].Name</h2>
                <p class="task-date">@jobs[i].JobDate?.ToString("dd.MM.yyyy")</p>

                @if (jobs[i].JobDate < DateTime.Now)
                {
                    <p class="deadline-passed">DEADLINE HAS PASSED!</p>
                }
                else
                {
                    <p class="time-remaining">@GetTimeRemaining(jobs[i].JobDate.Value)</p>
                }
            </div>
        }
    }
</div>
    </Authorized>
</AuthorizeView>

@code {

    List<Job>? jobs = new List<Job>();
    private string userName = "Unknown";
    private string? currentUserId;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (!string.IsNullOrEmpty(user.Identity.Name))
            {
                currentUserId = userIdClaim.Value;
                userName = appUser.Name;
            }
            else
            {
                userName = "Unknown";
            }
        }

        if (!string.IsNullOrEmpty(currentUserId))
        {
            jobs = await JobService.GetUserJobs(currentUserId);
        }
  
    }


    bool atLeastOneUrgent()
    {
        @for (int i = 0; i < jobs.Count; i++)
        {
            @if(jobs[i].Priority == 1)
            return true;  
        }
        return false;
    }

    string GetTimeRemaining(DateTime deadline)
    {
        TimeSpan remaining = deadline - DateTime.Now;
        if (remaining.TotalSeconds <= 0)
            return "DEADLINE HAS PASSED!";
        if (remaining.Days <= 0)
        {
            return $"Time remaining: {remaining.Hours} hours {remaining.Minutes} minutes";
        }
        else
        {
            return $"Time remaining: {remaining.Days} days {remaining.Hours} hours {remaining.Minutes} minutes";
        }

    }

}




