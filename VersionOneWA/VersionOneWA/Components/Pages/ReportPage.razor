@page "/report"
@inject IStatusServices StatusService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@rendermode InteractiveAuto
@attribute [StreamRendering]

<h2><strong>Reports</strong></h2>
<h4>Stay informed, stay effective!</h4>
<br>

<CreateInfoButton></CreateInfoButton>
<br>

@if (statuses == null)
{
    <span>Loading...</span>
    <br>
}
else if (statuses.Count == 0)
{
    <span>No reports found.</span>
    <br>
}
else
{
    <div class="tasks-container scrollable-tasks-list">
        @foreach (var status in statuses)
        {
            <div class="task-card" title=@($"Report: {status.Report}, \nTreatment: {(status.doneTreatment == true ? "Yes" : "No")}, \nSupplied Water: {(status.suppliedWater == true ? "Yes" : "No")}, \nSupplied Sugar: {(status.suppliedSugar == true ? "Yes" : "No")}")
                 @onclick="@(() => ToggleSelectedStatus(status))">
                <h2>@status.Name</h2>
                <h5>@(status.CreatedAt?.ToString("dd.MM.yyyy") ?? "Invalid date") (@(status.CreatedAt?.ToString("dddd") ?? ""))</h5>

                @if (selectedStatus == status)
                {
                    <textarea readonly rows="5" class="readonly-textarea">@status.Report</textarea>
                }

                <div class="task-buttons">
                    <EditInfoButton Id="status.Id" />
                    <DeleteInfoButton Id="status.Id" OnStatusDelete="HandleInfoDeleted" />
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Status>? statuses = null;
    private string? currentUserId;

    private Status? selectedStatus = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim != null)
        {
            currentUserId = userIdClaim.Value;
        }

        if (!string.IsNullOrEmpty(currentUserId))
        {
            statuses = await StatusService.GetUserStatuses(currentUserId);
        }

        if (user.IsInRole("Admin"))
        {
            statuses = await StatusService.GetStatuses();
        }
    }

    private async Task HandleInfoDeleted(int id)
    {
        statuses = statuses?.Where(status => status.Id != id).ToList();
        StateHasChanged();
    }

    private void ToggleSelectedStatus(Status status)
    {
        if (selectedStatus == status)
        {
            selectedStatus = null; 
        }
        else
        {
            selectedStatus = status;
        }
    }
}
