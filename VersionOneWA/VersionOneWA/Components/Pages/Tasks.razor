@page "/tasks"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [StreamRendering]
@inject IJobServices JobService
@using System.Security.Claims


<head>
    <title>Tasks</title>
</head>


<h2> <strong> Tasks </strong> </h2>
<h4> Be as productive as Bee <span class="beeimg"></span> </h4>
<br>

<CreateJobButton></CreateJobButton>
<body>



</body>

@if (jobs == null)
{
    <span>Loading...</span>
    <br>
}
else if (jobs.Count == 0)
{
    <span>No tasks found.</span>
    <br>
}
else
{
    <div class="tasks-container scrollable-tasks-list">
        @foreach (var job in jobs)
        {
            @if (!job.IsCompleted)
            {
                <div class="task-card" style="@GetBorderStyle(job.Priority)" title="@job.Description" >
                    <h2>@job.Name </h2>
                    <h5>@(job.Description?.Length > 100 ? job.Description.Substring(0, 100) + "..." : job.Description)</h5>
                    <div class="task-buttons">
                        <EditJobButton Id="job.Id" />
                        <DeleteJobButton Id="job.Id" OnJobDeleted="HandleJobDeleted" />
                        <button class="btn bg-success" Color="ButtonColor.Success" @onclick="@(() => MarkAsComplete(job))">Done</button>
                    </div>
                </div>
            }
        }

    </div>
}

@code {
    // protected override async Task OnInitializedAsync()
    // {
    //     jobs = await JobService.GetAllJobs();

    // }

    List<Job>? jobs = null;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");

            return;
        }

        var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim != null)
        {
            currentUserId = userIdClaim.Value;
        }

        if (!string.IsNullOrEmpty(currentUserId))
        {
            jobs = await JobService.GetUserJobs(currentUserId);
        }
        if (user.IsInRole("Admin"))
        {
            jobs = await JobService.GetAllJobs();
        }
    }

    private async Task HandleJobDeleted(int id)
    {
        jobs = jobs?.Where(job => job.Id != id).ToList();
        StateHasChanged();
    }


    private async Task MarkAsComplete(Job job)
    {
        job.IsCompleted = true;
        await JobService.EditJob(job.Id, job);
        StateHasChanged(); 
    }

    private string GetBorderStyle(int priority)
    {
        return priority switch
        {
            1 => "border: 4px solid red;",
            2 => "border: 4px solid green;",
            3 => "border: 4px solid black;",
            _ => "border: 4px solid black;" 
        };
    }
}
