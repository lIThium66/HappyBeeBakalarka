@page "/beehive-base"
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject HttpClient Http

<PageTitle>Beehive Base Overview</PageTitle>

<h1 class="text-2xl font-bold mb-4">My Beehive Bases</h1>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        @foreach (var baseItem in userBeehiveBases)
        {
            <div class="bg-white p-4 rounded-2xl shadow">
                <h2 class="text-xl font-semibold">@baseItem.Name</h2>
                <p class="text-sm text-gray-500 mb-2">Owner: @baseItem.User?.UserName</p>

                <div class="mt-2">
                    <h3 class="font-semibold">Beehives</h3>
                    <ul class="list-disc list-inside text-sm">
                        @foreach (var hive in baseItem.Beehives)
                        {
                            <li>@hive.Name</li>
                        }
                    </ul>
                </div>

                <div class="mt-2">
                    <h3 class="font-semibold">Jobs</h3>
                    <ul class="list-disc list-inside text-sm">
                        @foreach (var job in baseItem.Jobs)
                        {
                            <li>@job.Name</li>
                        }
                    </ul>
                </div>
            </div>
        }
    </div>

    <div class="mt-8">
        <h2 class="text-xl font-semibold mb-2">Create New Beehive Base</h2>
        <EditForm Model="newBase" OnValidSubmit="CreateBeehiveBase">
            <InputText class="border p-2 rounded w-full mb-2" @bind-Value="newBase.Name" placeholder="Beehive Base Name" />
            <label class="block mb-1 font-medium">Select Friends:</label>
            <div class="grid grid-cols-2 gap-2 mb-4">
                @foreach (var friend in availableFriends)
                {
                    <label class="flex items-center gap-2">
                        <InputCheckbox @bind-Value="friend.IsSelected" /> @friend.UserName
                    </label>
                }
            </div>
            <button type="submit" class="bg-yellow-500 hover:bg-yellow-600 text-white py-2 px-4 rounded">Create</button>
        </EditForm>
    </div>
}

@code {
    private List<BeehiveBase> userBeehiveBases = new();
    private List<SelectableFriend> availableFriends = new();
    private BeehiveBaseInputModel newBase = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserManager.GetUserAsync(.User);
        // Tu načítaj BeehiveBase, Jobs a Beehives pre usera + priateľov
        // Mock: Replace with real API/database call
        isLoading = false;
    }

    private async Task CreateBeehiveBase()
    {
        var user = await UserManager.GetUserAsync(Context.User);
        var selectedFriendIds = availableFriends.Where(f => f.IsSelected).Select(f => f.Id).ToList();

        // TODO: Send to backend API or service
        Console.WriteLine($"Creating base: {newBase.Name} with friends: {string.Join(", ", selectedFriendIds)}");

        // Reset form
        newBase = new();
        availableFriends.ForEach(f => f.IsSelected = false);
    }

    public class BeehiveBaseInputModel
    {
        public string Name { get; set; } = string.Empty;
    }

    public class SelectableFriend
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public bool IsSelected { get; set; } = false;
    }
}
